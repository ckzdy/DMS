/*
 -- 创建表
 create table dms_Will(
	id number primary key,
	logname varchar2(32),
	logip varchar2(32),
	pid number,
	logintime date,
	logouttime date,
	durations number
 );
 -- 创建序列
 create sequence dms_id_Will;
*/
//实现Oracle数据访问对象类
#include <stdio.h>
#include <time.h>
#include <cstring>
#include <iostream>
#include <sstream>
using namespace std;
#include "oracledao.h"
exec sql include sqlca;
exec sql begin declare section;
	char  g_userpasswd[30];
	struct DLogRec{
		char logname[30];
		char logip[30];
		int pid;
		char logintime[26];
		char logouttime[26];
		long durations;	
	}g_log={"","",0,"","",0};
exec sql end declare section;
// 构造函数
OracleDao::OracleDao(string const& username,
                     string const& passwd) throw (DBException)
{
	cout << "连接数据库开始..." << endl;
	sprintf(g_userpasswd,"%s/%s",username.c_str(),passwd.c_str());
	exec sql connect:g_userpasswd;
	if(sqlca.sqlcode)
	{
		ostringstream oss;
		oss << "ORA" << showpos << sqlca.sqlcode;
		throw DBException(oss.str());
	}
	cout << "连接数据库完成。" << endl;
}
// 析构函数
OracleDao::~OracleDao(void)
{
	cout <<"关闭数据库连接开始..."<< endl;
	exec sql commit work release;	
	cout <<"关闭数据库连接完成。"<< endl;
}
// 插入
void OracleDao::insert(MLogRec const& log) throw (DBException)
{
	cout << "插入数据开始..." << endl;
	strcpy(g_log.logname,log.logname);
	strcpy(g_log.logip,log.logip);
	g_log.pid = log.pid;
	time_t t = log.logintime;
	tm* local = localtime(&t);
	sprintf(g_log.logintime,"%04d-%02d-%02d %02d:%02d:%02d",
			local->tm_year + 1900,
			local->tm_mon + 1,
			local->tm_mday,
			local->tm_hour,
			local->tm_min,
			local->tm_sec);
	t = log.logouttime;
	local = localtime(&t);
	sprintf(g_log.logouttime,"%04d-%02d-%02d %02d:%02d:%02d",
			local->tm_year + 1900,
			local->tm_mon + 1,
			local->tm_mday,
			local->tm_hour,
			local->tm_min,
			local->tm_sec);
    g_log.durations = log.durations;
	exec sql insert into dms_Will values(
	    dms_id_Will.nextval,
		:g_log.logname,
		:g_log.logip,
		:g_log.pid,
		to_date(:g_log.logintime,'yyyy-mm-dd hh24:mi:ss'),
		to_date(:g_log.logouttime,'yyyy-mm-dd hh24:mi:ss'),
		:g_log.durations);
	if(sqlca.sqlcode)
	{
		ostringstream oss;
		oss<<"ORA"<<showpos<<sqlca.sqlcode;
		throw DBException(oss.str());
	}
	exec sql commit;
	cout << "插入数据完成。"<< endl;		
}









